name: 🔍 CI - Build & Test

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  APP_NAME: "ClickIt"
  BUNDLE_ID: "com.jsonify.clickit"

jobs:
  build-test:
    name: 🔨 Build & Test on Xcode
    runs-on: macos-15
    
    strategy:
      matrix:
        build_mode: [debug, release]
        build_system: [xcode, spm]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 📋 Environment Info
      run: |
        echo "🖥️ Runner: macOS $(sw_vers -productVersion)"
        echo "🔨 Xcode: $(xcodebuild -version | head -1)"
        echo "🐍 Swift: $(swift --version | head -1)"
        echo "🏗️ Build Mode: ${{ matrix.build_mode }}"
        echo "📦 Build System: ${{ matrix.build_system }}"
    
    - name: 🧪 Run Swift Tests
      if: matrix.build_system == 'spm'
      run: |
        echo "🧪 Running Swift Package Manager tests..."
        swift test --verbose
    
    - name: 🧪 Run Xcode Tests  
      if: matrix.build_system == 'xcode'
      run: |
        echo "🧪 Running Xcode tests..."
        xcodebuild test -project ClickIt.xcodeproj -scheme ClickIt -destination 'platform=macOS' || echo "⚠️ No tests configured in Xcode project"
    
    - name: 🏗️ Build App Bundle
      run: |
        echo "🔨 Building ${{ env.APP_NAME }} (${{ matrix.build_mode }} mode, ${{ matrix.build_system }} system)..."
        if [ "${{ matrix.build_system }}" = "xcode" ]; then
          # For Xcode builds in CI, disable code signing and set deployment target
          export CODE_SIGN_IDENTITY=""
          export CODE_SIGNING_REQUIRED=NO
          export CODE_SIGNING_ALLOWED=NO
          export MACOSX_DEPLOYMENT_TARGET=15.0
        fi
        ./build_app_unified.sh ${{ matrix.build_mode }} ${{ matrix.build_system }}
        
        echo "📋 Build completed!"
        ls -la dist/
    
    - name: 🔍 Verify Build Output
      run: |
        echo "🔍 Verifying build output..."
        
        if [ -d "dist/${{ env.APP_NAME }}.app" ]; then
          echo "✅ App bundle created successfully"
          
          # Check app bundle structure
          echo "📁 App bundle contents:"
          find "dist/${{ env.APP_NAME }}.app" -type f | head -10
          
          # Check binary architecture
          BINARY_PATH="dist/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}"
          if [ -f "$BINARY_PATH" ]; then
            echo "📱 Binary info:"
            file "$BINARY_PATH"
            echo "🏗️ Architecture:"
            lipo -info "$BINARY_PATH" 2>/dev/null || echo "Single architecture binary"
          else
            echo "❌ Binary not found at $BINARY_PATH"
            exit 1
          fi
          
          # Check code signing status
          echo "🔐 Code signing status:"
          codesign -dv "dist/${{ env.APP_NAME }}.app" 2>&1 || echo "⚠️ Not code signed"
          
        else
          echo "❌ App bundle not found!"
          exit 1
        fi
    
    - name: 📦 Upload Build Artifacts
      if: matrix.build_mode == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: "${{ env.APP_NAME }}-${{ matrix.build_system }}-${{ github.sha }}"
        path: |
          dist/${{ env.APP_NAME }}.app
          dist/build-info.txt
        retention-days: 7

  lint-and-quality:
    name: 🔍 Code Quality & Linting
    runs-on: macos-15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 📊 Swift Package Dependencies
      run: |
        echo "📊 Checking Swift Package dependencies..."
        swift package show-dependencies || echo "⚠️ No Package.swift or dependencies found"
    
    - name: 🔒 Security Check (Basic)
      run: |
        echo "🔒 Basic security checks..."
        echo "🔍 Checking for hardcoded secrets..."
        
        # Check for common secret patterns (basic check)
        if grep -r -i "password\|secret\|token\|key" --include="*.swift" Sources/ || true; then
          echo "⚠️ Found potential secrets - please review manually"
        else
          echo "✅ No obvious secrets found in Swift source"
        fi
        
        echo "🔍 Checking for insecure HTTP URLs..."
        if grep -r "http://" --include="*.swift" Sources/ || true; then
          echo "⚠️ Found HTTP URLs - consider using HTTPS"
        else
          echo "✅ No insecure HTTP URLs found"
        fi

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [build-test, lint-and-quality]
    if: always()
    
    steps:
    - name: 📊 CI Results Summary
      run: |
        echo "## 📋 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint-and-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-test.result }}" = "success" ] && [ "${{ needs.lint-and-quality.result }}" = "success" ]; then
          echo "🎉 **All checks passed!** The code is ready for release." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some checks failed.** Please review the results above." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- **For Release**: Create a version tag (e.g., \`git tag v1.3.0 && git push origin v1.3.0\`)" >> $GITHUB_STEP_SUMMARY
        echo "- **For Development**: Merge to main branch when ready" >> $GITHUB_STEP_SUMMARY
